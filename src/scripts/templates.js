angular.module("templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("filter.html","<h1 class=\"text-center\"> Filter </h1>\n\n<p>\n    The CSS filter property provides for effects like blurring or color\n    shifting on an element’s rendering before the element is displayed. Filters\n    are commonly used to adjust the rendering of an image, a background, or a\n    border.\n</p>\n<p>\n    You are not limited to only using one filter and can combine filters together\n    to get the desired look you are after.\n</p>\n\n<div class=\"filter-image-container\">\n    <img src=\"/images/guitar.jpg\" />\n</div>\n<br>\n<br>\n<ul class=\"list-group filter-options\">\n    <li class=\"list-group-item\">\n        <h3>url()</h3>\n        <p>\n            The url() function takes the location of an XML file that specifies\n            an SVG filter, and may include an anchor to a specific filter element.\n        </p>\n        <pre>\n            <code class=\"language-css\">\n                filter: url(resources.svg#c1);\n            </code>\n        </pre>\n    </li>\n    <li class=\"list-group-item\">\n        <h3>blur()</h3>\n        <p>Applies a Gaussian blur to the input image. The value of ‘radius’ defines the value of the standard deviation to the Gaussian function, or how many pixels on the screen blend into each other, so a larger value will create more blur. If no parameter is provided, then a value 0 is used. The parameter is specified as a CSS length, but does not accept percentage values.</p>\n        <pre>\n            <code class=\"language-css\">\n                filter: blur(5px);\n            </code>\n        </pre>\n    </li>\n    <li class=\"list-group-item\">\n        <h3>brightness()</h3>\n        <p>Applies a linear multiplier to input image, making it appear more or less bright. A value of 0% will create an image that is completely black. A value of 100% leaves the input unchanged. Other values are linear multipliers on the effect. Values of an amount over 100% are allowed, providing brighter results. If the ‘amount’ parameter is missing, a value of 1 is used.</p>\n        <pre>\n            <code class=\"language-css\">\n                filter: brigthness(0.5)\n            </code>\n        </pre>\n    </li>\n    <li class=\"list-group-item\">\n        <h3>contrast()</h3>\n        <p>\n            Adjusts the contrast of the input. A value of 0% will create an image\n            that is completely black. A value of 100% leaves the input unchanged.\n            Values of amount over 100% are allowed, providing results with less contrast.\n            If the ‘amount’ parameter is missing, a value of 1 is used.\n        </p>\n        <pre>\n            <code class=\"language-css\">\n                filter: contrast(200%);\n            </code>\n        </pre>\n    </li>\n    <li class=\"list-group-item\">\n        <h3>drop-shadow()</h3>\n        <p>\n            Applies a drop shadow effect to the input image. A drop shadow is\n            effectively a blurred, offset version of the input image\'s alpha\n            mask drawn in a particular color, composited below the image.\n        </p>\n        <pre>\n            <code class=\"language-css\">\n                // drop-shadow(x, y, blur, spread, color);\n                filter: drop-shadow(15px 15px 10px black);\n            </code>\n        </pre>\n    </li>\n    <li class=\"list-group-item\">\n        <h3>grayscale()</h3>\n        <p>\n            Converts the input image to grayscale. The value of ‘amount’ defines\n            the proportion of the conversion. A value of 100% is completely\n            grayscale. A value of 0% leaves the input unchanged. Values between\n            0% and 100% are linear multipliers on the effect. If the ‘amount’\n            parameter is missing, a value of 0 is used.\n        </p>\n        <pre>\n            <code class=\"language-css\">\n                filter: grayscale(100%);\n            </code>\n        </pre>\n    </li>\n    <li class=\"list-group-item\">\n        <h3>invert()</h3>\n        <p>\n            Inverts the samples in the input image. The value of ‘amount’ defines\n            the proportion of the conversion. A value of 100% is completely\n            inverted. A value of 0% leaves the input unchanged. Values between\n            0% and 100% are linear multipliers on the effect. If the ‘amount’\n            parameter is missing, a value of 0 is used.\n        </p>\n        <pre>\n            <code class=\"language-css\">\n                filter: invert(100%);\n            </code>\n        </pre>\n    </li>\n    <li class=\"list-group-item\">\n        <h3>opacity()</h3>\n        <p>\n            Applies transparency to the samples in the input image. The value of\n            ‘amount’ defines the proportion of the conversion. A value of 0% is\n            completely transparent. A value of 100% leaves the input unchanged.\n            Values between 0% and 100% are linear multipliers on the effect.\n            This is equivalent to multiplying the input image samples by amount.\n            If the ‘amount’ parameter is missing, a value of 1 is used. This\n            function is similar to the more established opacity property; the\n            difference is that with filters, some browsers provide hardware\n            acceleration for better performance.\n        </p>\n        <pre>\n            <code class=\"language-css\">\n                filter: opacity(50%);\n            </code>\n        </pre>\n    </li>\n</ul>\n");
$templateCache.put("flexbox.html","\n<h1 class=\"text-center\"> Flex </h1>\n\n<div class=\"flexbox\">\n    <div class=\"column\">\n\n    </div>\n    <div class=\"column\">\n\n    </div>\n    <div class=\"column\">\n\n    </div>\n</div>\n");
$templateCache.put("home.html","<div class=\"col-xs-12 col-sm-10 col-sm-offset-1\">\n    <h2 class=\"text-center\"> Lessons </h2>\n\n    <ul class=\"list-group text-center\">\n        <li class=\"list-group-item\">\n            <a href=\"#/flexbox\">\n                <h3>Flex</h3>\n            </a>\n        </li>\n        <li class=\"list-group-item\">\n            <a href=\"#/selectors\">\n                <h3>Selectors</h3>\n            </a>\n        </li>\n        <li class=\"list-group-item\">\n            <a href=\"#/transform\">\n                <h3>Transform</h3>\n            </a>\n        </li>\n        <li class=\"list-group-item\">\n            <a href=\"#/transition\">\n                <h3>Transition</h3>\n            </a>\n        </li>\n        <li class=\"list-group-item\">\n            <a href=\"#/keyframes\">\n                <h3>Keyframes</h3>\n            </a>\n        </li>\n        <li class=\"list-group-item\">\n            <a href=\"#/filter\">\n                <h3>Filter</h3>\n            </a>\n        </li>\n        <li class=\"list-group-item\">\n            <a href=\"#/media-queries\">\n                <h3>Media Queries</h3>\n            </a>\n        </li>\n        <li class=\"list-group-item\">\n            <a href=\"#/specificity\">\n                <h3>Specificity</h3>\n            </a>\n        </li>\n        <li class=\"list-group-item\">\n            <a href=\"#/methodology\">\n                <h3>Methodology</h3>\n            </a>\n        </li>\n    </ul>\n</div>\n");
$templateCache.put("keyframes.html","<h1 class=\"text-center\"> Keyframes </h1>\n\n<h2 class=\"text-center\"> Property Change </h2>\n\n<div class=\"colorchange\">\n\n</div>\n<br>\n<pre class=\"col-xs-12 col-sm-10 col-sm-offset-1\">\n    <code>\n        @keyframes colorchange {\n            // from: black;\n            0% { background-color: black; }\n            25% { background-color: red; }\n            50% { background-color: green; }\n            75% { background-color: blue; }\n            // to: black;\n            100% { background-color: black; }\n        }\n\n        .colorchange {\n            width: 80%;\n            height: 300px;\n            margin: 0 auto;\n            animation: colorchange 5s linear infinite;\n        }\n    </code>\n</pre>\n\n\n<h2 class=\"text-center\"> Movement </h2>\n\n<div class=\"ball-container\">\n    <div class=\"ball\">\n\n    </div>\n</div>\n<br>\n<pre class=\"col-xs-12 col-sm-10 col-sm-offset-1\">\n    <code>\n        @keyframes bounce {\n            // The ball starts at the top of the container\n            0%  { bottom: 300px; }\n            // The ball begins to move to the bottom of the container\n            25%  { bottom: 0; height: 100px; }\n            // The ball shortens to give the impression of compresson\n            30%  { bottom: 0; height: 50px; }\n            // The ball heightens to normal size\n            35%  { bottom: 0; height: 100px; }\n            // The ball begins to move back to top of container\n            75%  { bottom: 300px; }\n            // End animation with ball at top of container\n            100%  { bottom: 300px; }\n        }\n\n        .ball-container {\n            width: 100%;\n            height: 400px;\n            margin: 0 auto;\n            position: relative;\n\n            .ball {\n                position: absolute;\n                width: 100px;\n                height: 100px;\n                border-radius: 100%;\n                background: tomato;\n                animation: bounce 3s linear infinite;\n            }\n        }\n    </code>\n</pre>\n");
$templateCache.put("media-queries.html","<h1 class=\"text-center\"> Media Queries </h1>\n\n<pre>\n    <code class=\"language-css\" prism>\n        @media screen and (max-width: 768px) {\n            background-color: yellow;\n        }\n    </code>\n</pre>\n\n<p>\n    We need to utilize Media Queries to deploy adjustments to our layouts as and when they’re needed.\n\n    We know breakpoints should be placed not at predetermined widths, but rather at the point at which the design “breaks” and warrants adjustment.\n</p>\n");
$templateCache.put("methodology.html","<h1 class=\"text-center\"> Methodology </h1>\n\n<p>\n    There are countless different CSS methodologies poking around today, from\n    SMACSS to BEM to WHOZAMAWHATSIT. The particular methodology that you prescribe\n    to is not important. In fact, you do not have to prescribe to any preexisting\n    methodology and make your own if you choose. No matter which of these options\n    you choose, there are a few key factors that must be taken into account in\n    order to write great CSS.\n</p>\n\n<h2 class=\"text-center\"> Keys </h2>\n<ul class=\"list-group\">\n    <li class=\"list-group-item\">\n        <h3>Understandable</h3>\n        <p>\n            This key is a rather obvious one. Whichever methodology that you\n            choose, it must be understandable both by the experienced members of\n            your team and the layman. If a non-developer could read your class\n            names and gather what they mean, then you have succeeded in\n            achieving this goal.\n        </p>\n    </li>\n    <li class=\"list-group-item\">\n        <h3>Flexible</h3>\n        <p>\n            Your methodology should be flexible. Many methodologies are very\n            strict in their execution. This can be great in helping developers\n            not go to far off the path when making new classes and writing new\n            CSS rules. This can also not be so great because, on any non-trivial\n            web site, flexibility is required. You and your team will no doubt\n            find yourselves in a position at some point where you will need to\n            style a component inside of a component inside of a component inside\n            of a component... and will find it very difficult to apply the rules\n            of the methodology you\'ve decided to follow to the situation you are\n            in. This is where you will need flexibility in your methodology.\n        </p>\n    </li>\n    <li class=\"list-group-item\">\n        <h3>Functional & Modular</h3>\n        <p>\n            Classes and the grouping of CSS rules should be done on the basis\n            of their functionality and not on their content. The reason for\n            this is, if you create rules based on content, you will find it\n            difficult of reuse classes if you base their grouping on the\n            content that you are trying to style at that moment. If you\n            create classes to be based on their functionality, such as\n            positioning or applying designated widths, those classes will be\n            much more modular adn reusable in the future.\n        </p>\n    </li>\n    <li class=\"list-group-item\">\n        <h3>Consistent</h3>\n        <p>\n            This is the only key that can feel a bit strict, but it is\n            important if the methodology you take on or create is to be\n            understandable. Your approach should be consistent. Members of\n            the team, both new and old, should be able to make assumptions\n            about the code they\'re reading and the code they\'re writing\n            because they know that everyone on the team has been consistent\n            with the approach taken. This does not mean that rules cannot be\n            broken. There will no doubt be times when rules will have to be\n            either bent or broken in order to accomplish the task at hand. If\n            a consistent rule is to be bent of broken, however, it is important\n            to write comments within the code about why this was done so that\n            other developers who stuble upon it later on will understand. You\n            can also leave a TODO in the comments if this violation can be\n            fixed in the future through some form of code refactoring.\n        </p>\n    </li>\n</ul>\n");
$templateCache.put("responsive-design.html","<h1 class=\"text-center\"> Responsive Design </h1>\n\n<h3>Avoid \":hover\"</h3>\n<p>\n    Due to the increasing usage of the web through mobile browsers on touch\n    devices, having styles that only work on mouse hover will leave you having\n    to develop ever more styles to compensate for when there is no mouse to do\n    the hovering. For this reason, many developers are opting to design without\n    :hover altogether. This may seem like a horrible thing and is encrouching on\n    your ability to create, but you should see it as a challenge, a necessary one\n    that will help increase usability in your application.\n</p>\n\n<h3>Avoid \"px\"</h3>\n<p>\n    Using *px values has, since the beginnin of responsive web design, been seen\n    as being too rigid. More and more developers and designers are instead using\n    `rem`, `em`, and `%` values to express sizes because they are \"flexible\"\n    units of measurement.\n</p>\n");
$templateCache.put("selectors.html","<section class=\"selectors\">\n\n    <h2 class=\"text-center\"> Selectors </h2>\n\n    <section>\n        <h2> :nth-child(odd)</h2>\n\n        <pre>\n        <code class=\"language-css\">\n            ul.nth-odd {\n                li:nth-child(odd) {\n                    background-color: tomato;\n                }\n            }\n        </code>\n        </pre>\n\n        <ul class=\"nth-odd list-group\">\n            <li class=\"list-group-item\"> First</li>\n            <li class=\"list-group-item\"> Second</li>\n            <li class=\"list-group-item\"> Third</li>\n            <li class=\"list-group-item\"> Fourth</li>\n        </ul>\n    </section>\n\n    <section>\n        <h2> :nth-child(even)</h2>\n\n        <pre>\n        <code class=\"language-css\">\n            ul.nth-even {\n                li:nth-child(even) {\n                    background-color: tomato;\n                }\n            }\n        </code>\n        </pre>\n\n        <ul class=\"nth-even list-group\">\n            <li class=\"list-group-item\"> First </li>\n            <li class=\"list-group-item\"> Second </li>\n            <li class=\"list-group-item\"> Third </li>\n            <li class=\"list-group-item\"> Fourth </li>\n        </ul>\n    </section>\n\n</section>\n");
$templateCache.put("specificity.html","<h1 class=\"text-center\"> Specificity </h1>\n\n<p>\n    Specificity has long been a point of contention in the world of CSS\n    development. It causes issues when determining the appropriate methodology\n    when writing styles, while also causing issues when debugging styles in the\n    browser.\n</p>\n\n<p>\n    You will no doubt find yourself at some point saying, \"I don\'t understand. I\n    totally styled that element! Why aren\'t my styles showing up!?\", only to\n    realise that your styles were being overridden by a more specific rule.\n</p>\n\n<h2> Tips for dealing with specificity</h2>\n<dl>\n    <dt>Never use IDs in CSS, ever.</dt>\n    <dd>\n        They have no advantage over classes (anything you can do with an ID, you\n        can do with a class), they cannot be reused, and their specificity is way,\n        way too high. Even an infinite number of chained classes will not trump\n        the specificity of one ID.\n    </dd>\n    <br/>\n    <dt>\n        Do not nest selectors unnecessarily.\n    </dt>\n    <dd>\n        If .header-nav {} will work, never use .header .header-nav {}; to do so\n        will literally double the specificity of the selector without any benefit.\n    </dd>\n    <br/>\n    <dt>\n        Do not qualify selectors unless you have a compelling reason to do so.\n    </dt>\n    <dd>\n        If .nav {} will work, do not use ul.nav {}; to do so would not only limit\n        the places you can use the .nav class, but it also increases the specificity\n        of the selector, again, with no real gain.\n    </dd>\n    <br/>\n    <dt>\n        Make heavy use of classes\n    </dt>\n    <dd>\n        Classes are the ideal selector: low specificity (or rather, all classes\n        have the same specificity, so you have a level playing field), great\n        portability, and high reusability.\n    </dd>\n</dl>\n");
$templateCache.put("transform.html","<div class=\"transform\">\n    <h2 class=\"text-center\"> Transform </h2>\n\n    <p class=\"text-center\">\n        The CSS transform property lets you modify the coordinate space of the\n        CSS visual formatting model. Using it, elements can be translated,\n        rotated, scaled, and skewed according to the values set.\n    </p>\n\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n\n    <div class=\"outerbox\">\n        <div class=\"innerbox\"></div>\n    </div>\n\n    <br/>\n    <pre>\n        <code class=\"language-css\" prism>\n            .transform {\n                width: 100%;\n\n                .outerbox {\n                    height: 400px;\n                    width: 80%;\n                    margin: 0 auto;\n                    background-color: aliceblue;\n                }\n\n                .innerbox {\n                    height: 50%;\n                    width: 30%;\n                    background-color: tomato;\n                    transform: rotate(30deg);\n                }\n            }\n        </code>\n    </pre>\n\n    <article id=\"transform-options\">\n        <h3>Options</h3>\n        <ul class=\"list-group\">\n            <li class=\"list-group-item\">\n                <h4>scale</h4>\n                <p>\n                    Enlarges an element on its X and Y axis.\n                </p>\n                <pre>\n                    <code class=\"language-css\" prism>\n                        transform: scale(2,3)\n                    </code>\n                </pre>\n            </li>\n            <li class=\"list-group-item\">\n                <h4>scaleX</h4>\n                <p>\n                    Enlarges an element alone its X axis.\n                </p>\n                <pre>\n                    <code class=\"language-css\" prism>\n                        transform: scaleX(3)\n                    </code>\n                </pre>\n            </li>\n            <li class=\"list-group-item\">\n                <h4>scaleY</h4>\n                <p>\n                    Enlarges an element alone its X axis.\n                </p>\n                <pre>\n                    <code class=\"language-css\" prism>\n                        transform: scaleY(3)\n                    </code>\n                </pre>\n            </li>\n            <li class=\"list-group-item\">\n                <h4>skewX</h4>\n                <p>\n                    Skews the element along the X axis by the given angle.\n                </p>\n                <pre>\n                    <code class=\"language-css\" prism>\n                        transform: skewX(-30deg)\n                    </code>\n                </pre>\n            </li>\n            <li class=\"list-group-item\">\n                <h4>skewY</h4>\n                <p>\n                    Skews the element along the Y axis by the given angle.\n                </p>\n                <pre>\n                    <code class=\"language-css\" prism>\n                        transform: skewY(-30deg)\n                    </code>\n                </pre>\n            </li>\n        </ul>\n    </article>\n\n</div>\n");
$templateCache.put("transition.html","<div class=\"transition\">\n    <h2 class=\"text-center\"> Transition</h2>\n\n    <div class=\"outerbox\">\n        <div class=\"innerbox\"></div>\n    </div>\n\n    <br/>\n\n    <pre class=\"col-xs-12 col-sm-10 col-sm-offset-1\">\n        <code class=\"language-scss\">\n            .transition {\n                width: 100%;\n\n                .outerbox {\n                    height: 400px;\n                    width: 80%;\n                    margin: 0 auto;\n                    background-color: aliceblue;\n                }\n\n                .innerbox {\n                    height: 50%;\n                    width: 30%;\n                    margin-left: 0;\n                    background-color: tomato;\n                    transition: all 1s ease-in-out;\n                    &:hover {\n                        transform: rotate(180deg);\n                        background-color: blue;\n                        margin-left: 200px;\n                        width: 50%;\n                        height: 80%;\n                    }\n                }\n            }\n        </code>\n    </pre>\n</div>\n");}]);